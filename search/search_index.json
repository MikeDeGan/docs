{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Test link to an image end of image test","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#test-link-to-an-image","text":"","title":"Test link to an image"},{"location":"#end-of-image-test","text":"","title":"end of image test"},{"location":"Dates and Times/","text":"Dates and Times Here's a thing: Should check out the Moment library https://momentjs.com/","title":"Dates and Times"},{"location":"Dates and Times/#dates-and-times","text":"Here's a thing: Should check out the Moment library https://momentjs.com/","title":"Dates and Times"},{"location":"OAuth/","text":"OAuth2.0 is a process/protocol for granting access to a third party to resources that you own. Basically when you are on a web site or app and that site asks if they can have some kind of access to your contacts or calendar or whatever. OpenID is a protocol that sits on top of OAuth to enable authentication. If you are building a web site and want to allow your users to sign in using Facebook or Google or whoever. OpenID adds some user identity information. OAuth should not be used on its own for authentication. The OAuth process OpenID flow is very similar, basically because it is just OAuth with some ID stuff added in. A good overview of Oauth and OpenID on YouTube. OAuth Presentation","title":"OAuth 2.0 & OpenID"},{"location":"Performance/","text":"Tips for web site performance Network Transfer Optimizations Minimize your html, css and js files. Optimize images use the appropriate image format for the job animations - use a gif colorful images - use a jpeg simple icons or logos - use an SVG https://99designs.com/blog/tips/image-file-types/ https://www.sitepoint.com/gif-png-jpg-which-one-to-use/ image size analysis tool https://pageweight.imgix.com/ reduce png files with the TinyPNG site Reduce jpg files with the JPEG-optimizer site Choose simple illustrations over highly detailed photos Always lower jpeg image quality Resize the image based in the size that it will be displayed. 500px wide use a 500px wide image. Use media queries to display different sized images for different devices. Use CDN's like Imigx or CloudFlare. They can optimize images automatically among other things. Remove image metadata. EXIF. www.verexif.com Critical Render Path Load <style> in head. The css Object Model is required to render. Load <script> right before the /body tag. If the js is in the head the render will wait for the js to download. JS needs the html and css parsing to finish prior to running. So having js at the bottom gives your html, css and media a chance to download and render before the js downloads and runs. Load only what is needed. Clean up your css no unnecessary or unused css. Above the fold loading. Get just the css needed to style the above the fold stuff. You can have two css files, one that gets loaded in the head and the below the fold css that gets loaded after the initial render. It can be done like this.. //At the bottom of the html <script type=\"text/javascript\"> const loadStyleSheet = src => { if(document.createStylesheet) { document.createStylesheet(src) } else { const stylesheet = document.createElement('link'); stylesheet.href = src; stylesheet.type = 'text/css'; stylesheet.rel = 'stylesheet'; document.getElementsByTagName('head')[0].appendChild(stylesheet) } } window.onload - function() { loadStyleSheet('./style.css') } </script> </body> Media attributes. You can do these in your html files as well. As example you can put the following in your <head> tag to only load this css on screens over 500px. media= will always default to media=\"all\". <link rel=\"stylesheet\" href=\"./style2.css\" media=\"only screen and (min-width:500px)\"> Less specificity. The less specific your css the less processing the browser will have to do and the fewer characters that will be needed to download. Not a huge performance increase but it is something. Javascript Load scripts asynchronously Javascript will download and execute immediately, blocking further downloading of html, css, etc. Defer loading of scripts The <script async> and <script defer> tags should be used for scripts that do not manipulate the dom or css. Perfect for things like Google Analytics. Defer acts very much the same as putting your scripts at the bottom just above the /body tag. Normal execution <script> This is the default behavior of the <script> element. Parsing of the HTML code pauses while the script is executing. For slow servers and heavy scripts this means that displaying the webpage will be delayed. Deferred execution <script defer> Simply put: delaying script execution until the HTML parser has finished. A positive effect of this attribute is that the DOM will be available for your script. However, since not every browser supports defer yet, don\u2019t rely on it! Asynchronous execution <script async> Don\u2019t care when the script will be available? Asynchronous is the best of both worlds: HTML parsing may continue and the script will be executed as soon as it\u2019s ready. I\u2019d recommend this for scripts such as Google Analytics. Minimize DOM manipulation Avoid long running Javascript Chrome is working on Javascript not being parser blocking (render blocking) Resource Prefetching Resource prefetching are ways of preloading or preparing for things that are very likely to be needed in the future. Things like resolving DNS for URLs that we know we are likely to visit or 'prefetching' images that will be needed soon. https://css-tricks.com/prefetching-preloading-prebrowsing/ Speed Analysis Tools These sites will analyze your site and provide a detailed report scoring the site and showing where to improve. PageSpeed by Google https://developers.google.com/speed/pagespeed/insights www.webpagetest.org View main thread activities in a table to sort activities based on which ones took up the most time. Analyze frames per second (FPS) to measure whether your animations truly run smoothly. Monitor CPU usage, JS heap size, DOM nodes, layouts per second, and more in real-time with the Performance Monitor. Capture screenshots while recording to play back exactly how the page looked while the page loaded, or an animation fired, and so on. View interactions to quickly identify what happened on a page after a user interacted with it. Find scroll performance issues in real-time by highlighting the page whenever a potentially problematic listener fires. View paint events in real-time to identify costly paint events that may be harming the performance of your animations. View main thread activity to view every event that occurred on the main thread while you were recording. Other Resources: http://optimizilla.com/ https://tools.pingdom.com/ https://www.thinkwithgoogle.com/feature/mobile/ https://developers.google.com/web/tools/lighthouse/ http://websitespeedranker.com/ https://pageweight.imgix.com/ https://developers.google.com/speed/pagespeed/insights/ https://passmarked.com/ https://images.guide/ https://www.crazyegg.com/blog/image-editing-tools/ HTTP/2 Main goal is to improve network latency. May change the way you optimize for performance. https://developers.google.com/web/fundamentals/performance/http2/ Then start getting ready for http/3 .","title":"Performance"},{"location":"Performance/#tips-for-web-site-performance","text":"","title":"Tips for web site performance"},{"location":"Performance/#network-transfer-optimizations","text":"Minimize your html, css and js files.","title":"Network Transfer Optimizations"},{"location":"Performance/#optimize-images","text":"use the appropriate image format for the job animations - use a gif colorful images - use a jpeg simple icons or logos - use an SVG https://99designs.com/blog/tips/image-file-types/ https://www.sitepoint.com/gif-png-jpg-which-one-to-use/ image size analysis tool https://pageweight.imgix.com/ reduce png files with the TinyPNG site Reduce jpg files with the JPEG-optimizer site Choose simple illustrations over highly detailed photos Always lower jpeg image quality Resize the image based in the size that it will be displayed. 500px wide use a 500px wide image. Use media queries to display different sized images for different devices. Use CDN's like Imigx or CloudFlare. They can optimize images automatically among other things. Remove image metadata. EXIF. www.verexif.com","title":"Optimize images"},{"location":"Performance/#critical-render-path","text":"Load <style> in head. The css Object Model is required to render. Load <script> right before the /body tag. If the js is in the head the render will wait for the js to download. JS needs the html and css parsing to finish prior to running. So having js at the bottom gives your html, css and media a chance to download and render before the js downloads and runs. Load only what is needed. Clean up your css no unnecessary or unused css. Above the fold loading. Get just the css needed to style the above the fold stuff. You can have two css files, one that gets loaded in the head and the below the fold css that gets loaded after the initial render. It can be done like this.. //At the bottom of the html <script type=\"text/javascript\"> const loadStyleSheet = src => { if(document.createStylesheet) { document.createStylesheet(src) } else { const stylesheet = document.createElement('link'); stylesheet.href = src; stylesheet.type = 'text/css'; stylesheet.rel = 'stylesheet'; document.getElementsByTagName('head')[0].appendChild(stylesheet) } } window.onload - function() { loadStyleSheet('./style.css') } </script> </body> Media attributes. You can do these in your html files as well. As example you can put the following in your <head> tag to only load this css on screens over 500px. media= will always default to media=\"all\". <link rel=\"stylesheet\" href=\"./style2.css\" media=\"only screen and (min-width:500px)\"> Less specificity. The less specific your css the less processing the browser will have to do and the fewer characters that will be needed to download. Not a huge performance increase but it is something.","title":"Critical Render Path"},{"location":"Performance/#javascript","text":"Load scripts asynchronously Javascript will download and execute immediately, blocking further downloading of html, css, etc. Defer loading of scripts The <script async> and <script defer> tags should be used for scripts that do not manipulate the dom or css. Perfect for things like Google Analytics. Defer acts very much the same as putting your scripts at the bottom just above the /body tag. Normal execution <script> This is the default behavior of the <script> element. Parsing of the HTML code pauses while the script is executing. For slow servers and heavy scripts this means that displaying the webpage will be delayed. Deferred execution <script defer> Simply put: delaying script execution until the HTML parser has finished. A positive effect of this attribute is that the DOM will be available for your script. However, since not every browser supports defer yet, don\u2019t rely on it! Asynchronous execution <script async> Don\u2019t care when the script will be available? Asynchronous is the best of both worlds: HTML parsing may continue and the script will be executed as soon as it\u2019s ready. I\u2019d recommend this for scripts such as Google Analytics. Minimize DOM manipulation Avoid long running Javascript Chrome is working on Javascript not being parser blocking (render blocking)","title":"Javascript"},{"location":"Performance/#resource-prefetching","text":"Resource prefetching are ways of preloading or preparing for things that are very likely to be needed in the future. Things like resolving DNS for URLs that we know we are likely to visit or 'prefetching' images that will be needed soon. https://css-tricks.com/prefetching-preloading-prebrowsing/","title":"Resource Prefetching"},{"location":"Performance/#speed-analysis-tools","text":"These sites will analyze your site and provide a detailed report scoring the site and showing where to improve. PageSpeed by Google https://developers.google.com/speed/pagespeed/insights www.webpagetest.org View main thread activities in a table to sort activities based on which ones took up the most time. Analyze frames per second (FPS) to measure whether your animations truly run smoothly. Monitor CPU usage, JS heap size, DOM nodes, layouts per second, and more in real-time with the Performance Monitor. Capture screenshots while recording to play back exactly how the page looked while the page loaded, or an animation fired, and so on. View interactions to quickly identify what happened on a page after a user interacted with it. Find scroll performance issues in real-time by highlighting the page whenever a potentially problematic listener fires. View paint events in real-time to identify costly paint events that may be harming the performance of your animations. View main thread activity to view every event that occurred on the main thread while you were recording. Other Resources: http://optimizilla.com/ https://tools.pingdom.com/ https://www.thinkwithgoogle.com/feature/mobile/ https://developers.google.com/web/tools/lighthouse/ http://websitespeedranker.com/ https://pageweight.imgix.com/ https://developers.google.com/speed/pagespeed/insights/ https://passmarked.com/ https://images.guide/ https://www.crazyegg.com/blog/image-editing-tools/","title":"Speed Analysis Tools"},{"location":"Performance/#http2","text":"Main goal is to improve network latency. May change the way you optimize for performance. https://developers.google.com/web/fundamentals/performance/http2/ Then start getting ready for http/3 .","title":"HTTP/2"},{"location":"SSH/","text":"SSH SSH (secure shell) is just another protocol like http, ftp, etc. SSH allows us to share files and control computers over the Internet in an encrypted form. On Linux or Apple just use the ssh command, if on Windows use Putty. Example, to log in to one of the Raspberry Pis and login as the user 'pi' use this command: ssh 192.168.1.126 -l pi or ssh pi@192.168.1.126 Techniques used in SSH Symmetrical Encryption Symmetrical encryption uses a single key to encrypt and to decrypt. The key is never shared, publicly or privately. It uses a 'key exchange' using asymmetrical encryption. Asymmetrical Encryption Asymmetrical encryption is only used by ssh to exchange the shared key. This is known as the Difiie Hellman Key Exchange. The symmetrical encrypted key that gets used by ssh gets generated by this 'key exchange'. Each end, the client and the host, will generate a public/private key pair. They will then trade their public keys. Then using the other ends public key and their private key they will each generate an identical 'shared key.' The cool part is that the shared key is never shared, it is never sent over the internet or sent anywhere. Each end, client and host, are able to generate the key using their private key and the other ends public key. So it is very difficult for a man in the middle to ever get the key. So this seems very secure so far. However, a person could potentially still sit in the middle and send iits own public keys to both the client and the host and generate shared keys with each. As the host sends something the man in the middle will decrypt it then encrypt it using the clients key and so on. This is where hashing comes in. Hashing A hash gets created using the secret key, the packet sequence number and the message contents. One end sends the hash, the other end will try to generate a hash using the same inputs and if the hashes match that pretty much ensures that the sender is using the same secret key. RSA To gen an rsa public/private key pair with Linux: cd ~ cd .ssh ssh-keygen -t rsa -b 4096 -C \"myemail@gmail.com\" The -t is for 'type', the -b if for bytes. It will ask you for a keyname and a passphrase. SSH on Github I like to create a different key for each computer that I will connect from. Usually name them id_rsa_computername. Start the ssh agent from the .ssh hidden folder cd .ssh eval $(ssh-agent) Then add your key to the agent ssh-add ~/.ssh/id_rsa_docs Now copy the .pub key to Github Install xclip if it is not already installed sudo apt-get install xclip copy the public (NOT THE PRIVATE) key to the clipboard xclip -sel clip < ~/.ssh/id_rsa_docs.pub DID YOU HAVE THE .PUB ON THE END? Don't forget the .pub! Now go to Github.com to set up the key. In the upper-right corner of any page, click your profile photo, then click Settings In the user settings sidebar, click SSH and GPG keys. Click New SSH key enter a title paste the key click the add SSH key button If you need to change your remote's URL from HTTPS to SSH: check your current remote settings with the following command git remote -v Set your remote to the ssh connection git remote set-url origin git@github.com:MikeDeGan/repo-name.git Note that on your first push you will receive a warning. You are supposed to call the other party and verify the fingerprint. The authenticity of host 'github.com (140.82.114.3)' can't be established. If the shown RSA fingerprint looks correct then enter 'yes' to add github to the list of known sites","title":"SSH"},{"location":"SSH/#ssh","text":"SSH (secure shell) is just another protocol like http, ftp, etc. SSH allows us to share files and control computers over the Internet in an encrypted form. On Linux or Apple just use the ssh command, if on Windows use Putty. Example, to log in to one of the Raspberry Pis and login as the user 'pi' use this command: ssh 192.168.1.126 -l pi or ssh pi@192.168.1.126","title":"SSH"},{"location":"SSH/#techniques-used-in-ssh","text":"","title":"Techniques used in SSH"},{"location":"SSH/#symmetrical-encryption","text":"Symmetrical encryption uses a single key to encrypt and to decrypt. The key is never shared, publicly or privately. It uses a 'key exchange' using asymmetrical encryption.","title":"Symmetrical Encryption"},{"location":"SSH/#asymmetrical-encryption","text":"Asymmetrical encryption is only used by ssh to exchange the shared key. This is known as the Difiie Hellman Key Exchange. The symmetrical encrypted key that gets used by ssh gets generated by this 'key exchange'. Each end, the client and the host, will generate a public/private key pair. They will then trade their public keys. Then using the other ends public key and their private key they will each generate an identical 'shared key.' The cool part is that the shared key is never shared, it is never sent over the internet or sent anywhere. Each end, client and host, are able to generate the key using their private key and the other ends public key. So it is very difficult for a man in the middle to ever get the key. So this seems very secure so far. However, a person could potentially still sit in the middle and send iits own public keys to both the client and the host and generate shared keys with each. As the host sends something the man in the middle will decrypt it then encrypt it using the clients key and so on. This is where hashing comes in.","title":"Asymmetrical Encryption"},{"location":"SSH/#hashing","text":"A hash gets created using the secret key, the packet sequence number and the message contents. One end sends the hash, the other end will try to generate a hash using the same inputs and if the hashes match that pretty much ensures that the sender is using the same secret key.","title":"Hashing"},{"location":"SSH/#rsa","text":"To gen an rsa public/private key pair with Linux: cd ~ cd .ssh ssh-keygen -t rsa -b 4096 -C \"myemail@gmail.com\" The -t is for 'type', the -b if for bytes. It will ask you for a keyname and a passphrase.","title":"RSA"},{"location":"SSH/#ssh-on-github","text":"I like to create a different key for each computer that I will connect from. Usually name them id_rsa_computername. Start the ssh agent from the .ssh hidden folder cd .ssh eval $(ssh-agent) Then add your key to the agent ssh-add ~/.ssh/id_rsa_docs Now copy the .pub key to Github Install xclip if it is not already installed sudo apt-get install xclip copy the public (NOT THE PRIVATE) key to the clipboard xclip -sel clip < ~/.ssh/id_rsa_docs.pub DID YOU HAVE THE .PUB ON THE END? Don't forget the .pub! Now go to Github.com to set up the key. In the upper-right corner of any page, click your profile photo, then click Settings In the user settings sidebar, click SSH and GPG keys. Click New SSH key enter a title paste the key click the add SSH key button If you need to change your remote's URL from HTTPS to SSH: check your current remote settings with the following command git remote -v Set your remote to the ssh connection git remote set-url origin git@github.com:MikeDeGan/repo-name.git Note that on your first push you will receive a warning. You are supposed to call the other party and verify the fingerprint. The authenticity of host 'github.com (140.82.114.3)' can't be established. If the shown RSA fingerprint looks correct then enter 'yes' to add github to the list of known sites","title":"SSH on Github"},{"location":"TyporaTest/","text":"Typora that is a huge margin. kljfljfljsldfkjsdlf lskjdfls lskjd fl lskdjf l lkjsdf ll lksdjf lll sdflkl lskdjf ll sdlfkj llsjd fllksjdf llksdjf lskdjf lksdjf llskdj flslskdjf lslskjd fpwuerp wriu wsdjf lsz,mnvcnv ,xnv ,xc There must be a better way to insert images! This is a quick bit of code: class GoogleAuth extends React.Component { componentDidMount() { window.gapi.load(\"client:auth2\", () => { window.gapi.client .init({ clientId: \"318802615607-3l2k61n5spk3n7u6b2mb49geeqi2ueng.apps.googleusercontent.com\", scope: \"email\" }) .then(() => { this.auth = window.gapi.auth2.getAuthInstance(); this.onAuthChange(this.auth.isSignedIn.get()); this.auth.isSignedIn.listen(this.onAuthChange); }); }); } Have some tasks to do... [ ] do this [x] and this [ ] not this Now what ?","title":"TyporaTest"},{"location":"TyporaTest/#there-must-be-a-better-way-to-insert-images","text":"This is a quick bit of code: class GoogleAuth extends React.Component { componentDidMount() { window.gapi.load(\"client:auth2\", () => { window.gapi.client .init({ clientId: \"318802615607-3l2k61n5spk3n7u6b2mb49geeqi2ueng.apps.googleusercontent.com\", scope: \"email\" }) .then(() => { this.auth = window.gapi.auth2.getAuthInstance(); this.onAuthChange(this.auth.isSignedIn.get()); this.auth.isSignedIn.listen(this.onAuthChange); }); }); } Have some tasks to do... [ ] do this [x] and this [ ] not this Now what ?","title":"There must be a better way to insert images!"},{"location":"React/Hooks/","text":"Hooks Why Hooks Hooks overcomes many of the issues that we come across when using class based components. Calling Super(props) is annoying Classes make knowing how 'this' works difficult at times Organizing components by life-cycle methods forces us to sprinkle related logic throughout our components. React has no good primitive for sharing non-visual logic. Just use Functions Using functions instead of classes removes the Super(props) and 'this' issues right away. Ok great now what about state and life-cycle methods, they are kind of handy. State No need for a class based component. You will need to import 'useState' into your functional component. import React, { useState } from 'react' const Shop = props => { const [cart, setCart] = useState([]) const cartHandler = () => { setCart(['A Book']) } return <button onClick={cartHandler}>Add to Cart</button> } useState() returns an array with two elements. The first element is the state and the second is a function that will set the state. State is not just one object containing everything. You can have several 'states' and they can be anything like a string or boolean, whatever. It does not have to be an array as shown above. If you have multiple pieces if state that you need to track just create them like this... const [cart, setCart] = useState([]) const [myList, setMyList] = useState('not an array') When you set state it will completely replace state. You don't just pass in updates as you did in a class based component. So if your state was set to {el1: 'one', el2: 'two'} you could not just do setState({el2: 'three'}) you would have to either do setState({...state}, {el2: 'three'}) or something similar. Lifecycle Methods It looks like lifecycle Methods are sort of being referred to as 'side effects' under React Hooks. The core React Hook that will be used in place of the Lifecycle Methods is called useEffect(). componentDidMount To perform the functionality of the class based componentDidMount do the following import React, { useState, useEffect } from 'react' const Shop = props => { const [products, setProducts] = useState([]) useEffect(() => { fetch('my-backend.com/products') .then(res => res.json()) .then(fetchedProducts => setProducts(fetchedProducts)) }, []) return ( <ul> {products.map(product => ( <li key={product.id}>{product.name}</li> ))} </ul> ) } The key here is the second element of the useEffect function, the empty array []. The second element controls when this function gets run. It will run whenever the second element changes. So setting the second element to an empty array will ensure that it will never change and never run again. useParams useParams will pull any parameter values from the route. In this example the route was something like /:userId/places. import { useParams } from \"react-router-dom\"; ... const userId = useParams().userId;","title":"Hooks"},{"location":"React/Hooks/#hooks","text":"","title":"Hooks"},{"location":"React/Hooks/#why-hooks","text":"Hooks overcomes many of the issues that we come across when using class based components. Calling Super(props) is annoying Classes make knowing how 'this' works difficult at times Organizing components by life-cycle methods forces us to sprinkle related logic throughout our components. React has no good primitive for sharing non-visual logic.","title":"Why Hooks"},{"location":"React/Hooks/#just-use-functions","text":"Using functions instead of classes removes the Super(props) and 'this' issues right away. Ok great now what about state and life-cycle methods, they are kind of handy.","title":"Just use Functions"},{"location":"React/Hooks/#state","text":"No need for a class based component. You will need to import 'useState' into your functional component. import React, { useState } from 'react' const Shop = props => { const [cart, setCart] = useState([]) const cartHandler = () => { setCart(['A Book']) } return <button onClick={cartHandler}>Add to Cart</button> } useState() returns an array with two elements. The first element is the state and the second is a function that will set the state. State is not just one object containing everything. You can have several 'states' and they can be anything like a string or boolean, whatever. It does not have to be an array as shown above. If you have multiple pieces if state that you need to track just create them like this... const [cart, setCart] = useState([]) const [myList, setMyList] = useState('not an array') When you set state it will completely replace state. You don't just pass in updates as you did in a class based component. So if your state was set to {el1: 'one', el2: 'two'} you could not just do setState({el2: 'three'}) you would have to either do setState({...state}, {el2: 'three'}) or something similar.","title":"State"},{"location":"React/Hooks/#lifecycle-methods","text":"It looks like lifecycle Methods are sort of being referred to as 'side effects' under React Hooks. The core React Hook that will be used in place of the Lifecycle Methods is called useEffect().","title":"Lifecycle Methods"},{"location":"React/Hooks/#componentdidmount","text":"To perform the functionality of the class based componentDidMount do the following import React, { useState, useEffect } from 'react' const Shop = props => { const [products, setProducts] = useState([]) useEffect(() => { fetch('my-backend.com/products') .then(res => res.json()) .then(fetchedProducts => setProducts(fetchedProducts)) }, []) return ( <ul> {products.map(product => ( <li key={product.id}>{product.name}</li> ))} </ul> ) } The key here is the second element of the useEffect function, the empty array []. The second element controls when this function gets run. It will run whenever the second element changes. So setting the second element to an empty array will ensure that it will never change and never run again.","title":"componentDidMount"},{"location":"React/Hooks/#useparams","text":"useParams will pull any parameter values from the route. In this example the route was something like /:userId/places. import { useParams } from \"react-router-dom\"; ... const userId = useParams().userId;","title":"useParams"},{"location":"React/Portals/","text":"Modal window in a React app The key to getting a modal window to work in React is to use Portals. Portals allow a component to render a sub component but to have it act as a child of some other component, usually the 'root' div. In this example StreamDelete is opening a modal window under 'root'. Portals are described in detail in the Udemy course Modern React with Redux section 21. When you attach the modal to a div the modal will replace the content of that div or whatever with the content of your modal. So you will almost always create a sibling to the 'root' element to attach the modal to. <body> <noscript>You need to enable JavaScript to run this app.</noscript> <div id=\"root\"></div> <div id=\"modal\"></div> </body> The modal component will not return normal jsx it will return the ReactDOM.createPortal function. import React from \"react\"; import ReactDOM from \"react-dom\"; const Modal = props => { return ReactDOM.createPortal( <div className=\"ui dimmer modals visible active\"> <div className=\"ui standard modal visible active\"> lorem20 crap lkjsflj ljsdf ljf lkjs flksjdf </div> </div>, document.querySelector(\"#modal\") ); }; export default Modal; To call the modal you just call it like any component import React from \"react\"; import Modal from \"../Modal\"; const StreamDelete = () => { return ( <div> StreamDelete <Modal /> </div> ); }; export default StreamDelete; NOTE: You would normally use Portals to render modal windows but would also use portals if trying to render some React component into some html that was not created by your application like server side rendered html like Java or Ruby or something like that. React Portals are usually used when creating a modal window, hovercard or tooltip. A portal will render the React component under a different DOM element. Check out the React documentation for more information.","title":"Portals"},{"location":"React/Portals/#modal-window-in-a-react-app","text":"The key to getting a modal window to work in React is to use Portals. Portals allow a component to render a sub component but to have it act as a child of some other component, usually the 'root' div. In this example StreamDelete is opening a modal window under 'root'. Portals are described in detail in the Udemy course Modern React with Redux section 21. When you attach the modal to a div the modal will replace the content of that div or whatever with the content of your modal. So you will almost always create a sibling to the 'root' element to attach the modal to. <body> <noscript>You need to enable JavaScript to run this app.</noscript> <div id=\"root\"></div> <div id=\"modal\"></div> </body> The modal component will not return normal jsx it will return the ReactDOM.createPortal function. import React from \"react\"; import ReactDOM from \"react-dom\"; const Modal = props => { return ReactDOM.createPortal( <div className=\"ui dimmer modals visible active\"> <div className=\"ui standard modal visible active\"> lorem20 crap lkjsflj ljsdf ljf lkjs flksjdf </div> </div>, document.querySelector(\"#modal\") ); }; export default Modal; To call the modal you just call it like any component import React from \"react\"; import Modal from \"../Modal\"; const StreamDelete = () => { return ( <div> StreamDelete <Modal /> </div> ); }; export default StreamDelete; NOTE: You would normally use Portals to render modal windows but would also use portals if trying to render some React component into some html that was not created by your application like server side rendered html like Java or Ruby or something like that. React Portals are usually used when creating a modal window, hovercard or tooltip. A portal will render the React component under a different DOM element. Check out the React documentation for more information.","title":"Modal window in a React app"},{"location":"React/ReactRedux/","text":"React Redux","title":"React Redux"},{"location":"React/ReactRedux/#react-redux","text":"","title":"React Redux"},{"location":"React/ReactRouter/","text":"React Router Programmatic Navigation //programmatic navigation back to the root route // sometimes a little tricky import history from \"../history\"; history.push(\"/\"); // import createHistory from \"history/createBrowserHistory\"; const createHistory = require(\"history\").createBrowserHistory; export default createHistory(); Switch React Router will, by default, route 'greedily' That just means that if multiple routes match it will try to go to both routes. As in this it would go to streams/new and to streams/:id when you just want /streams/new <Route path=\"/\" exact component={StreamList} /> <Route path=\"/streams/new\" exact component={StreamCreate} /> <Route path=\"/streams/edit/:id\" exact component={StreamEdit} /> <Route path=\"/streams/delete/:id\" exact component={StreamDelete} /> <Route path=\"/streams/:id\" exact component={StreamShow} /> To stop this behavior and have it stop after the first hit you need to add the Switch component from react router dom as... import { Router, Route, Switch } from \"react-router-dom\"; <Switch> <Route path=\"/\" exact component={StreamList} /> <Route path=\"/streams/new\" exact component={StreamCreate} /> <Route path=\"/streams/edit/:id\" exact component={StreamEdit} /> <Route path=\"/streams/delete/:id\" exact component={StreamDelete} /> <Route path=\"/streams/:id\" exact component={StreamShow} /> </Switch> Redirect Redirect will take any route that falls through and redirect to wherever you send it. import React from 'react'; import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'; import Users from './user/pages/Users'; import NewPlace from './places/pages/NewPlace'; const App = () => { return ( <Router> <Switch> <Route path=\"/\" exact> <Users /> </Route> <Route path=\"/places/new\" exact> <NewPlace /> </Route> <Redirect to=\"/\" /> </Switch> </Router> ); }; export default App; NavLink NavLink is similar to Link except you can examine the url and set styling depending on if you are currently on that page and that kind of thing. import React from \"react\"; import { NavLink } from \"react-router-dom\"; import \"./NavLinks.css\"; const NavLinks = props => { return ( <ul className=\"nav-links\"> <li> <NavLink to=\"/\" exact> ALL USERS </NavLink> </li> <li> <NavLink to=\"/\">MY PLACES</NavLink> </li> <li> <NavLink to=\"/\">ADD PLACE</NavLink> </li> <li> <NavLink to=\"/\">AUTHENTICATE</NavLink> </li> </ul> ); };","title":"React Router"},{"location":"React/ReactRouter/#react-router","text":"","title":"React Router"},{"location":"React/ReactRouter/#programmatic-navigation","text":"//programmatic navigation back to the root route // sometimes a little tricky import history from \"../history\"; history.push(\"/\"); // import createHistory from \"history/createBrowserHistory\"; const createHistory = require(\"history\").createBrowserHistory; export default createHistory();","title":"Programmatic Navigation"},{"location":"React/ReactRouter/#switch","text":"React Router will, by default, route 'greedily' That just means that if multiple routes match it will try to go to both routes. As in this it would go to streams/new and to streams/:id when you just want /streams/new <Route path=\"/\" exact component={StreamList} /> <Route path=\"/streams/new\" exact component={StreamCreate} /> <Route path=\"/streams/edit/:id\" exact component={StreamEdit} /> <Route path=\"/streams/delete/:id\" exact component={StreamDelete} /> <Route path=\"/streams/:id\" exact component={StreamShow} /> To stop this behavior and have it stop after the first hit you need to add the Switch component from react router dom as... import { Router, Route, Switch } from \"react-router-dom\"; <Switch> <Route path=\"/\" exact component={StreamList} /> <Route path=\"/streams/new\" exact component={StreamCreate} /> <Route path=\"/streams/edit/:id\" exact component={StreamEdit} /> <Route path=\"/streams/delete/:id\" exact component={StreamDelete} /> <Route path=\"/streams/:id\" exact component={StreamShow} /> </Switch>","title":"Switch"},{"location":"React/ReactRouter/#redirect","text":"Redirect will take any route that falls through and redirect to wherever you send it. import React from 'react'; import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'; import Users from './user/pages/Users'; import NewPlace from './places/pages/NewPlace'; const App = () => { return ( <Router> <Switch> <Route path=\"/\" exact> <Users /> </Route> <Route path=\"/places/new\" exact> <NewPlace /> </Route> <Redirect to=\"/\" /> </Switch> </Router> ); }; export default App;","title":"Redirect"},{"location":"React/ReactRouter/#navlink","text":"NavLink is similar to Link except you can examine the url and set styling depending on if you are currently on that page and that kind of thing. import React from \"react\"; import { NavLink } from \"react-router-dom\"; import \"./NavLinks.css\"; const NavLinks = props => { return ( <ul className=\"nav-links\"> <li> <NavLink to=\"/\" exact> ALL USERS </NavLink> </li> <li> <NavLink to=\"/\">MY PLACES</NavLink> </li> <li> <NavLink to=\"/\">ADD PLACE</NavLink> </li> <li> <NavLink to=\"/\">AUTHENTICATE</NavLink> </li> </ul> ); };","title":"NavLink"},{"location":"React/Render-Props/","text":"Render Props The term \u201crender prop\u201d refers to a technique for sharing code between React components using a prop whose value is a function. It helps to share state or behavior that one component contains into another component. In most cases this technique can be handled cleaner with the new React Hooks. Hooks can replace some render props, but not all of them. Hooks can\u2019t render anything, they can\u2019t set values on context (even though they can consume values), and they can\u2019t implement error boundaries. Given these limitations, you may still find yourself using render props from time to time. React Docs Example In this example taken from the reactjs.org docs render props page you can see how they have made the Mouse component reusable by passing in a component to dynamically determine what to render. class Cat extends React.Component { render() { const mouse = this.props.mouse; return ( <img src=\"/cat.jpg\" style={{ position: 'absolute', left: mouse.x, top: mouse.y }} /> ); } } class Mouse extends React.Component { constructor(props) { super(props); this.handleMouseMove = this.handleMouseMove.bind(this); this.state = { x: 0, y: 0 }; } handleMouseMove(event) { this.setState({ x: event.clientX, y: event.clientY }); } render() { return ( <div style={{ height: '100%' }} onMouseMove={this.handleMouseMove}> {/* Instead of providing a static representation of what <Mouse> renders, use the `render` prop to dynamically determine what to render. */} {this.props.render(this.state)} </div> ); } } class MouseTracker extends React.Component { render() { return ( <div> <h1>Move the mouse around!</h1> <Mouse render={mouse => ( <Cat mouse={mouse} /> )}/> </div> ); } }","title":"Render Props"},{"location":"React/Render-Props/#render-props","text":"The term \u201crender prop\u201d refers to a technique for sharing code between React components using a prop whose value is a function. It helps to share state or behavior that one component contains into another component. In most cases this technique can be handled cleaner with the new React Hooks. Hooks can replace some render props, but not all of them. Hooks can\u2019t render anything, they can\u2019t set values on context (even though they can consume values), and they can\u2019t implement error boundaries. Given these limitations, you may still find yourself using render props from time to time.","title":"Render Props"},{"location":"React/Render-Props/#react-docs-example","text":"In this example taken from the reactjs.org docs render props page you can see how they have made the Mouse component reusable by passing in a component to dynamically determine what to render. class Cat extends React.Component { render() { const mouse = this.props.mouse; return ( <img src=\"/cat.jpg\" style={{ position: 'absolute', left: mouse.x, top: mouse.y }} /> ); } } class Mouse extends React.Component { constructor(props) { super(props); this.handleMouseMove = this.handleMouseMove.bind(this); this.state = { x: 0, y: 0 }; } handleMouseMove(event) { this.setState({ x: event.clientX, y: event.clientY }); } render() { return ( <div style={{ height: '100%' }} onMouseMove={this.handleMouseMove}> {/* Instead of providing a static representation of what <Mouse> renders, use the `render` prop to dynamically determine what to render. */} {this.props.render(this.state)} </div> ); } } class MouseTracker extends React.Component { render() { return ( <div> <h1>Move the mouse around!</h1> <Mouse render={mouse => ( <Cat mouse={mouse} /> )}/> </div> ); } }","title":"React Docs Example"},{"location":"css/Media-Queries/","text":"/ ------------------------------------------ Responsive Grid Media Queries - 1280, 1024, 768, 480 1280-1024 - desktop (default grid) 1024-768 - tablet landscape 768-480 - tablet 480-less - phone landscape & smaller -------------------------------------------- / @media all and (min-width: 1024px) and (max-width: 1280px) { } @media all and (min-width: 768px) and (max-width: 1024px) { } @media all and (min-width: 480px) and (max-width: 768px) { } @media all and (max-width: 480px) { } / ------------------------------------------ Foundation Media Queries http://foundation.zurb.com/docs/media-queries.html -------------------------------------------- / / Small screens - MOBILE / @media only screen { } / Define mobile styles - Mobile First / @media only screen and (max-width: 40em) { } / max-width 640px, mobile-only styles, use when QAing mobile issues / / Medium screens - TABLET / @media only screen and (min-width: 40.063em) { } / min-width 641px, medium screens / @media only screen and (min-width: 40.063em) and (max-width: 64em) { } / min-width 641px and max-width 1024px, use when QAing tablet-only issues / / Large screens - DESKTOP / @media only screen and (min-width: 64.063em) { } / min-width 1025px, large screens / @media only screen and (min-width: 64.063em) and (max-width: 90em) { } / min-width 1024px and max-width 1440px, use when QAing large screen-only issues / / XLarge screens / @media only screen and (min-width: 90.063em) { } / min-width 1441px, xlarge screens / @media only screen and (min-width: 90.063em) and (max-width: 120em) { } / min-width 1441px and max-width 1920px, use when QAing xlarge screen-only issues / / XXLarge screens / @media only screen and (min-width: 120.063em) { } / min-width 1921px, xlarge screens / / ------------------------------------------ / / Portrait / @media screen and (orientation:portrait) { / Portrait styles here / } / Landscape / @media screen and (orientation:landscape) { / Landscape styles here / } / CSS for iPhone, iPad, and Retina Displays / / Non-Retina / @media screen and (-webkit-max-device-pixel-ratio: 1) { } / Retina / @media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (min--moz-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) { } / iPhone Portrait / @media screen and (max-device-width: 480px) and (orientation:portrait) { } / iPhone Landscape / @media screen and (max-device-width: 480px) and (orientation:landscape) { } / iPad Portrait / @media screen and (min-device-width: 481px) and (orientation:portrait) { } / iPad Landscape / @media screen and (min-device-width: 481px) and (orientation:landscape) { } / ------------------------------------------ Live demo samples - http://andrelion.github.io/mediaquery/livedemo.html -------------------------------------------- /","title":"Media Queries"},{"location":"mongo/Mongoose-Basics/","text":"Mongoose basics Mongoose Documentation Mongoose is an Object-Document Mapper (ODM) for Mongo, similar to Sequelize as an ORM.","title":"Mongoose Basics"},{"location":"mongo/Mongoose-Basics/#mongoose-basics","text":"Mongoose Documentation Mongoose is an Object-Document Mapper (ODM) for Mongo, similar to Sequelize as an ORM.","title":"Mongoose basics"},{"location":"node/Express/","text":"Express Body Parser Body Parser is now included with Express. Express-Validator Express Validator is a set of Express middlewares that wraps Validator.js and sanitizes functions. Basically a great way to validate user input on the server. npm install --save express-validator The Express-Validator documentation page: https://express-validator.github.io/docs/ The following bit of code shows the validator in use: Notice the array entered as the second parameter of the router.post function. The third parameter is a function that will return a status of 400 and the array of errors if there are errors. const express = require(\"express\"); const router = express.Router(); const { check, validationResult } = require(\"express-validator\"); // @route POST api/users // @desc Register user // @access Public router.post( \"/\", [ check(\"name\", \"Name is required\") .not() .isEmpty(), check(\"email\", \"Please include a valid email\").isEmail(), check( \"password\", \"Please enter a password with 6 or more characters\" ).isLength({ min: 6 }) ], (req, res) => { const errors = validationResult(req); if (!errors.isEmpty()) { return res.status(400).json({ errors: errors.array() }); } res.send(\"User route\"); } ); module.exports = router;","title":"Express"},{"location":"node/Express/#express","text":"","title":"Express"},{"location":"node/Express/#body-parser","text":"Body Parser is now included with Express.","title":"Body Parser"},{"location":"node/Express/#express-validator","text":"Express Validator is a set of Express middlewares that wraps Validator.js and sanitizes functions. Basically a great way to validate user input on the server. npm install --save express-validator The Express-Validator documentation page: https://express-validator.github.io/docs/ The following bit of code shows the validator in use: Notice the array entered as the second parameter of the router.post function. The third parameter is a function that will return a status of 400 and the array of errors if there are errors. const express = require(\"express\"); const router = express.Router(); const { check, validationResult } = require(\"express-validator\"); // @route POST api/users // @desc Register user // @access Public router.post( \"/\", [ check(\"name\", \"Name is required\") .not() .isEmpty(), check(\"email\", \"Please include a valid email\").isEmail(), check( \"password\", \"Please enter a password with 6 or more characters\" ).isLength({ min: 6 }) ], (req, res) => { const errors = validationResult(req); if (!errors.isEmpty()) { return res.status(400).json({ errors: errors.array() }); } res.send(\"User route\"); } ); module.exports = router;","title":"Express-Validator"},{"location":"node/Node-Dev-Tools/","text":"Node Dev Tools Nodemon Nodemon is mainly used to speed Node development by restarting your app whenever a file changes in the monitored app folder. Nodemon can also be used to emulate process.env variables. Installation npm install --save-dev nodemon Usage nodemon [your node app] Usually we will use a package.json script: \"scripts\": { \"start\": \"node index.js\", \"server\": \"nodemon index.js\" } npm run server will start the app for development.","title":"Node Dev Tools"},{"location":"node/Node-Dev-Tools/#node-dev-tools","text":"","title":"Node Dev Tools"},{"location":"node/Node-Dev-Tools/#nodemon","text":"Nodemon is mainly used to speed Node development by restarting your app whenever a file changes in the monitored app folder. Nodemon can also be used to emulate process.env variables.","title":"Nodemon"},{"location":"node/Node-Dev-Tools/#installation","text":"npm install --save-dev nodemon","title":"Installation"},{"location":"node/Node-Dev-Tools/#usage","text":"nodemon [your node app] Usually we will use a package.json script: \"scripts\": { \"start\": \"node index.js\", \"server\": \"nodemon index.js\" } npm run server will start the app for development.","title":"Usage"}]}